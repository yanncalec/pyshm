#!/bin/bash
trap "exit" INT

if [ $# -lt 2 ]; then
    echo "Template script for OSMOS project" >&2
    echo "Usage: $0 pid configuration_file" >&2
    exit 1
else
    # PID=$1
    . "$2"  # source configuration file
    if [ ! $?==0 ]; then  # error in reading configuration file
        exit 1
    fi
fi


DBDIR=$HOME/Osmos/Data/Local  # Local database directory
# OUTDIR=$HOME/Osmos/Local/Outputs  # Output directory
# PROJDIR=$DBDIR/$(printf "%03d" $PID)  # Project directory
# FIGDIR=$OUTDIR/$(printf "%03d" $PID)  # Figure and results directory
LOGFILE=/tmp/osmos_log.txt  # user defined temporary file

# if [ ! -d $OUTDIR ]; then
#     echo "Creat the output directory $OUTDIR"
#     mkdir $OUTDIR
# fi

########## Deconvolution, analysis and plot ##########
# options for deconvolution
opts_deconv=""
if [ ! -z $ALOCS ]; then opts_deconv+=" --alocs $ALOCS"; fi
if [ ! -z $TIME0 ]; then opts_deconv+=" --time0 $TIME0"; fi
if [ ! -z $TIME1 ]; then opts_deconv+=" --time1 $TIME1"; fi
if [ ! -z $KZORD ]; then opts_deconv+=" --kzord $KZORD"; fi
if [ ! -z $MWSIZE ]; then opts_deconv+=" --mwsize $MWSIZE"; fi
if [ ! -z $MWMETHOD ]; then opts_deconv+=" --mwmethod $MWMETHOD"; fi
# if [ ! -z $COMPONENT ]; then opts_deconv+=" --component $COMPONENT"; fi
if [ ! -z $SIDX ]; then opts_deconv+=" --sidx $SIDX"; fi
if [ ! -z $NTRN ]; then opts_deconv+=" --Ntrn $NTRN"; fi
if [ ! -z $LAG ]; then opts_deconv+=" --lag $LAG"; fi
if [ ! -z $DORD ]; then opts_deconv+=" --dord $DORD"; fi
if [ ! -z $PORD ]; then opts_deconv+=" --pord $PORD"; fi
if [ "$POLY" == "true" ]; then opts_deconv+=" --poly"; fi
if [ ! -z $VTHRESH ]; then opts_deconv+=" --vthresh $VTHRESH"; fi
if [ ! -z $NEXP ]; then opts_deconv+=" --Nexp $NEXP"; fi
if [ ! -z $SNR2 ]; then opts_deconv+=" --snr2 $SNR2"; fi
if [ ! -z $CLEN2 ]; then opts_deconv+=" --clen2 $CLEN2"; fi
if [ ! -z $DSPL ]; then opts_deconv+=" --dspl $DSPL"; fi


# options for analyse
opts_an=""
if [ ! -z $CDIM ]; then opts_an+=" --cdim $CDIM"; fi
if [ ! -z $CTHRESH ]; then opts_an+=" --vthresh $CTHRESH"; fi
if [ "$PROJ" == "true" ]; then opts_an+=" --proj"; fi

# options for plot of results
opts_pl=""
if [ "$HTML" == "true" ]; then opts_pl+=" --html"; fi


# No double quotes around opts_xx in the following
# Must put double quotes around filename variables containing whitespaces
for SUBCOMMAND in ${SUBCOMMANDS[@]}; do
    for COMPONENT in ${COMPONENTS[@]}; do
        if [ $SUBCOMMAND == "ls" ]; then
            if [ ! -z $SNR2 ]; then opts_deconv+=" --snr2 $SNR2"; fi
            if [ ! -z $CLEN2 ]; then opts_deconv+=" --clen2 $CLEN2"; fi
            # echo $opts
        elif [ $SUBCOMMAND == "bm" ]; then
            if [ ! -z $SIGMAQ2 ]; then opts_deconv+=" --sigmaq2 $SIGMAQ2"; fi
            if [ ! -z $SIGMAR2 ]; then opts_deconv+=" --sigmar2 $SIGMAR2"; fi
            if [ ! -z $KALMAN ]; then opts_deconv+=" --kalman $KALMAN"; fi
        fi

        echo "-----------------------------------------------------"
        # cmd="osmos_deconv $SUBCOMMAND $INFILE $OUTDIR $opts --component $COMPONENT -v"
        cmd='osmos_deconv "$SUBCOMMAND" "$1" "$DBDIR" $opts_deconv --component "$COMPONENT" -v'
        # echo $cmd  # double-quoted variables not expanded
        eval $cmd | tee $LOGFILE
        echo ""
        # if [ ! $?==0 ]; then
        #     echo "Script failed." >&2
        #     exit 1;
        # fi
        OUTFILE=$(tail -n 1 $LOGFILE)

        # osmos_ANalyse "$OUTFILE" $opts_an -o -v
        # # cmd=$(printf "osmos_ANalyse %s %s -o -v" "${OUTFILE}" ${opts_an})  # doesn't work
        cmd='osmos_analyse "$OUTFILE" $opts_an -v'
        # echo $cmd
        eval "$cmd" | tee $LOGFILE
        echo ""
        OUTFILE=$(tail -n 1 $LOGFILE)

        cmd='osmos_plot "$OUTFILE" $opts_pl -v'
        # cmd='osmos_plot analyse "$OUTFILE" $opts_pl --html -v'
        # # echo "$cmd"
        eval "$cmd"
        echo ""
    done
done
