#!/bin/bash

if [ $# -lt 1 ]; then
    echo "Template script for OSMOS project" >&2
    echo "Usage: $0 configuration_file" >&2
    exit 1
else
    . "$1"  # source configuration file
    if [ ! $?==0 ]; then
        exit 1
    fi
fi

DBDIR=$HOME/Data  # Local database directory
OUTDIR=$HOME/Outputs  # Output directory
PROJDIR=$DBDIR/$(printf "%03d" $PID)  # Project directory
FIGDIR=$OUTDIR/$(printf "%03d" $PID)  # Figure and results directory
LOGFILE=/tmp/osmos_log.txt  # user defined temporary file

if [ ! -d $FIGDIR ]; then
    echo "Creat the output directory $FIGDIR"
    mkdir $FIGDIR
fi

########## Download ##########
# Uncomment to activate
# echo "Download..."
# osmos_download -p $PID -v $DBDIR
# osmos_plot data $PROJDIR/Raw.pkl $FIGDIR -v --html


########## Preprocessing ##########
# Uncomment to activate
# if [ ! -z "$opts_pp" ]; then
#     echo "Preprocessing..."
#     echo osmos_preprocess $PROJDIR -v --json "$opts_pp"
#     echo osmos_plot preprocess $PROJDIR/Preprocessed_static.pkl $FIGDIR -v --html
# fi


########## Deconvolution, analysis and plot ##########
# options for deconvolution
opts=""
if [ ! -z $ALOCS ]; then opts+=" --alocs $ALOCS"; fi
if [ ! -z $TIME0 ]; then opts+=" --time0 $TIME0"; fi
if [ ! -z $TIME1 ]; then opts+=" --time1 $TIME1"; fi
# if [ ! -z $KZORD ]; then opts+=" --kzord $KZORD"; fi
if [ ! -z $MWMETHOD ]; then opts+=" --mwmethod $MWMETHOD"; fi
# if [ ! -z $COMPONENT ]; then opts+=" --component $COMPONENT"; fi
if [ ! -z $SIDX ]; then opts+=" --sidx $SIDX"; fi
if [ ! -z $NTRN ]; then opts+=" --Ntrn $NTRN"; fi
if [ ! -z $VTHRESH ]; then opts+=" --vthresh $VTHRESH"; fi
# if [ $CORRFLAG == "true" ]; then opts+=" --corrflag"; fi

# options for analysis
opts_an=""
if [ ! -z $MWSIZE_AN ]; then opts_an+=" --mwsize $MWSIZE_AN"; fi
if [ ! -z $HRNG_AN ]; then opts_an+=" --hrng $HRNG_AN"; fi
if [ ! -z $HWSIZE_AN ]; then opts_an+=" --hwsize $HWSIZE_AN"; fi
if [ ! -z $CDIM_AN ]; then opts_an+=" --cdim $CDIM_AN"; fi
if [ ! -z $VTHRESH_AN ]; then opts_an+=" --vthresh $VTHRESH_AN"; fi
if [ ! -z $DROPHEAD_AN ]; then opts_an+=" --drophead $DROPHEAD_AN"; fi
if [ "$CORRFLAG_AN" == "true" ]; then opts_an+=" --corrflag"; fi

# Plot results
opts_pl=""
if [ ! -z $NTHRESH_PL ]; then opts_pl+=" --nthresh $NTHRESH_PL"; fi
if [ ! -z $STHRESH_PL ]; then opts_pl+=" --sthresh $STHRESH_PL"; fi
if [ ! -z $HTHRESH_PL ]; then opts_pl+=" --hthresh $HTHRESH_PL"; fi
if [ ! -z $DROPHEAD_PL ]; then opts_pl+=" --drophead $DROPHEAD_PL"; fi
if [ ! -z $GAP_PL ]; then opts_pl+=" --gap $GAP_PL"; fi


# No double quotes around opts_xx in the following
# Must put double quotes around filename variables containing whitespaces
for SUBCOMMAND in ${SUBCOMMANDS[@]}; do
    for COMPONENT in ${COMPONENTS[@]}; do
        if [ $SUBCOMMAND == "ls" ]; then
            if [ ! -z $SNR2 ]; then opts+=" --snr2 $SNR2"; fi
            if [ ! -z $CLEN2 ]; then opts+=" --clen2 $CLEN2"; fi
        elif [ $SUBCOMMAND == "bm" ]; then
            if [ ! -z $SIGMAQ2 ]; then opts+=" --sigmaq2 $SIGMAQ2"; fi
            if [ ! -z $SIGMAR2 ]; then opts+=" --sigmar2 $SIGMAR2"; fi
            if [ ! -z $KALMAN ]; then opts+=" --kalman $KALMAN"; fi
        fi

        echo "---------------------------------------------------------------------------------------------------------------------"
        # cmd="osmos_deconv $SUBCOMMAND $PROJDIR $FIGDIR $opts --component $COMPONENT -v"
        cmd='osmos_deconv "$SUBCOMMAND" "$PROJDIR" "$FIGDIR" $opts --component "$COMPONENT" -v'
        # echo $cmd  # double-quoted variables not expanded
        eval $cmd | tee $LOGFILE
        echo ""
        # if [ ! $?==0 ]; then
        #     echo "Script failed." >&2
        #     exit 1;
        # fi
        OUTFILE=$(tail -n 1 $LOGFILE)

        # osmos_analyse "$OUTFILE" $opts_an -o -v
        # # cmd=$(printf "osmos_analyse %s %s -o -v" "${OUTFILE}" ${opts_an})  # doesn't work
        cmd='osmos_analyse "$OUTFILE" $opts_an -o -v'
        # echo $cmd
        eval "$cmd" #| tee $LOGFILE
        echo ""

        cmd='osmos_plot analyse "$OUTFILE" $opts_pl --html -v'
        # # echo "$cmd"
        eval "$cmd"
        echo ""
    done
done
